/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.tum.in.dss.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Student {

  public interface Iface {

    public void voteLectureSpeed(int lectureId, Speed speedOld, Speed speedNew) throws UnknownIdException, org.apache.thrift.TException;

    public void voteForPause(int lectureId, Pause pauseOld, Pause pauseNew) throws UnknownIdException, org.apache.thrift.TException;

    public List<Question> getQuestions(int lectureId) throws UnknownIdException, org.apache.thrift.TException;

    public void voteQuestion(int questionId, boolean vote) throws UnknownIdException, org.apache.thrift.TException;

    public Question addQuestion(int lectureId, String question) throws UnknownIdException, org.apache.thrift.TException;

    public void addAnswer(int questionId, String answer) throws UnknownIdException, IllegalAnswerException, org.apache.thrift.TException;

    public void rateLecture(int lectureId, Rating rating) throws UnknownIdException, IllegalRatingException, org.apache.thrift.TException;

    public void registerCallback(String ip, int port) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void voteLectureSpeed(int lectureId, Speed speedOld, Speed speedNew, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.voteLectureSpeed_call> resultHandler) throws org.apache.thrift.TException;

    public void voteForPause(int lectureId, Pause pauseOld, Pause pauseNew, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.voteForPause_call> resultHandler) throws org.apache.thrift.TException;

    public void getQuestions(int lectureId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getQuestions_call> resultHandler) throws org.apache.thrift.TException;

    public void voteQuestion(int questionId, boolean vote, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.voteQuestion_call> resultHandler) throws org.apache.thrift.TException;

    public void addQuestion(int lectureId, String question, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addQuestion_call> resultHandler) throws org.apache.thrift.TException;

    public void addAnswer(int questionId, String answer, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAnswer_call> resultHandler) throws org.apache.thrift.TException;

    public void rateLecture(int lectureId, Rating rating, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.rateLecture_call> resultHandler) throws org.apache.thrift.TException;

    public void registerCallback(String ip, int port, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerCallback_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void voteLectureSpeed(int lectureId, Speed speedOld, Speed speedNew) throws UnknownIdException, org.apache.thrift.TException
    {
      send_voteLectureSpeed(lectureId, speedOld, speedNew);
      recv_voteLectureSpeed();
    }

    public void send_voteLectureSpeed(int lectureId, Speed speedOld, Speed speedNew) throws org.apache.thrift.TException
    {
      voteLectureSpeed_args args = new voteLectureSpeed_args();
      args.setLectureId(lectureId);
      args.setSpeedOld(speedOld);
      args.setSpeedNew(speedNew);
      sendBase("voteLectureSpeed", args);
    }

    public void recv_voteLectureSpeed() throws UnknownIdException, org.apache.thrift.TException
    {
      voteLectureSpeed_result result = new voteLectureSpeed_result();
      receiveBase(result, "voteLectureSpeed");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void voteForPause(int lectureId, Pause pauseOld, Pause pauseNew) throws UnknownIdException, org.apache.thrift.TException
    {
      send_voteForPause(lectureId, pauseOld, pauseNew);
      recv_voteForPause();
    }

    public void send_voteForPause(int lectureId, Pause pauseOld, Pause pauseNew) throws org.apache.thrift.TException
    {
      voteForPause_args args = new voteForPause_args();
      args.setLectureId(lectureId);
      args.setPauseOld(pauseOld);
      args.setPauseNew(pauseNew);
      sendBase("voteForPause", args);
    }

    public void recv_voteForPause() throws UnknownIdException, org.apache.thrift.TException
    {
      voteForPause_result result = new voteForPause_result();
      receiveBase(result, "voteForPause");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public List<Question> getQuestions(int lectureId) throws UnknownIdException, org.apache.thrift.TException
    {
      send_getQuestions(lectureId);
      return recv_getQuestions();
    }

    public void send_getQuestions(int lectureId) throws org.apache.thrift.TException
    {
      getQuestions_args args = new getQuestions_args();
      args.setLectureId(lectureId);
      sendBase("getQuestions", args);
    }

    public List<Question> recv_getQuestions() throws UnknownIdException, org.apache.thrift.TException
    {
      getQuestions_result result = new getQuestions_result();
      receiveBase(result, "getQuestions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQuestions failed: unknown result");
    }

    public void voteQuestion(int questionId, boolean vote) throws UnknownIdException, org.apache.thrift.TException
    {
      send_voteQuestion(questionId, vote);
      recv_voteQuestion();
    }

    public void send_voteQuestion(int questionId, boolean vote) throws org.apache.thrift.TException
    {
      voteQuestion_args args = new voteQuestion_args();
      args.setQuestionId(questionId);
      args.setVote(vote);
      sendBase("voteQuestion", args);
    }

    public void recv_voteQuestion() throws UnknownIdException, org.apache.thrift.TException
    {
      voteQuestion_result result = new voteQuestion_result();
      receiveBase(result, "voteQuestion");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Question addQuestion(int lectureId, String question) throws UnknownIdException, org.apache.thrift.TException
    {
      send_addQuestion(lectureId, question);
      return recv_addQuestion();
    }

    public void send_addQuestion(int lectureId, String question) throws org.apache.thrift.TException
    {
      addQuestion_args args = new addQuestion_args();
      args.setLectureId(lectureId);
      args.setQuestion(question);
      sendBase("addQuestion", args);
    }

    public Question recv_addQuestion() throws UnknownIdException, org.apache.thrift.TException
    {
      addQuestion_result result = new addQuestion_result();
      receiveBase(result, "addQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addQuestion failed: unknown result");
    }

    public void addAnswer(int questionId, String answer) throws UnknownIdException, IllegalAnswerException, org.apache.thrift.TException
    {
      send_addAnswer(questionId, answer);
      recv_addAnswer();
    }

    public void send_addAnswer(int questionId, String answer) throws org.apache.thrift.TException
    {
      addAnswer_args args = new addAnswer_args();
      args.setQuestionId(questionId);
      args.setAnswer(answer);
      sendBase("addAnswer", args);
    }

    public void recv_addAnswer() throws UnknownIdException, IllegalAnswerException, org.apache.thrift.TException
    {
      addAnswer_result result = new addAnswer_result();
      receiveBase(result, "addAnswer");
      if (result.ea != null) {
        throw result.ea;
      }
      if (result.eb != null) {
        throw result.eb;
      }
      return;
    }

    public void rateLecture(int lectureId, Rating rating) throws UnknownIdException, IllegalRatingException, org.apache.thrift.TException
    {
      send_rateLecture(lectureId, rating);
      recv_rateLecture();
    }

    public void send_rateLecture(int lectureId, Rating rating) throws org.apache.thrift.TException
    {
      rateLecture_args args = new rateLecture_args();
      args.setLectureId(lectureId);
      args.setRating(rating);
      sendBase("rateLecture", args);
    }

    public void recv_rateLecture() throws UnknownIdException, IllegalRatingException, org.apache.thrift.TException
    {
      rateLecture_result result = new rateLecture_result();
      receiveBase(result, "rateLecture");
      if (result.ea != null) {
        throw result.ea;
      }
      if (result.eb != null) {
        throw result.eb;
      }
      return;
    }

    public void registerCallback(String ip, int port) throws org.apache.thrift.TException
    {
      send_registerCallback(ip, port);
      recv_registerCallback();
    }

    public void send_registerCallback(String ip, int port) throws org.apache.thrift.TException
    {
      registerCallback_args args = new registerCallback_args();
      args.setIp(ip);
      args.setPort(port);
      sendBase("registerCallback", args);
    }

    public void recv_registerCallback() throws org.apache.thrift.TException
    {
      registerCallback_result result = new registerCallback_result();
      receiveBase(result, "registerCallback");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void voteLectureSpeed(int lectureId, Speed speedOld, Speed speedNew, org.apache.thrift.async.AsyncMethodCallback<voteLectureSpeed_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      voteLectureSpeed_call method_call = new voteLectureSpeed_call(lectureId, speedOld, speedNew, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class voteLectureSpeed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lectureId;
      private Speed speedOld;
      private Speed speedNew;
      public voteLectureSpeed_call(int lectureId, Speed speedOld, Speed speedNew, org.apache.thrift.async.AsyncMethodCallback<voteLectureSpeed_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.speedOld = speedOld;
        this.speedNew = speedNew;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("voteLectureSpeed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        voteLectureSpeed_args args = new voteLectureSpeed_args();
        args.setLectureId(lectureId);
        args.setSpeedOld(speedOld);
        args.setSpeedNew(speedNew);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnknownIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_voteLectureSpeed();
      }
    }

    public void voteForPause(int lectureId, Pause pauseOld, Pause pauseNew, org.apache.thrift.async.AsyncMethodCallback<voteForPause_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      voteForPause_call method_call = new voteForPause_call(lectureId, pauseOld, pauseNew, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class voteForPause_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lectureId;
      private Pause pauseOld;
      private Pause pauseNew;
      public voteForPause_call(int lectureId, Pause pauseOld, Pause pauseNew, org.apache.thrift.async.AsyncMethodCallback<voteForPause_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.pauseOld = pauseOld;
        this.pauseNew = pauseNew;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("voteForPause", org.apache.thrift.protocol.TMessageType.CALL, 0));
        voteForPause_args args = new voteForPause_args();
        args.setLectureId(lectureId);
        args.setPauseOld(pauseOld);
        args.setPauseNew(pauseNew);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnknownIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_voteForPause();
      }
    }

    public void getQuestions(int lectureId, org.apache.thrift.async.AsyncMethodCallback<getQuestions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQuestions_call method_call = new getQuestions_call(lectureId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQuestions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lectureId;
      public getQuestions_call(int lectureId, org.apache.thrift.async.AsyncMethodCallback<getQuestions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQuestions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQuestions_args args = new getQuestions_args();
        args.setLectureId(lectureId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Question> getResult() throws UnknownIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQuestions();
      }
    }

    public void voteQuestion(int questionId, boolean vote, org.apache.thrift.async.AsyncMethodCallback<voteQuestion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      voteQuestion_call method_call = new voteQuestion_call(questionId, vote, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class voteQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int questionId;
      private boolean vote;
      public voteQuestion_call(int questionId, boolean vote, org.apache.thrift.async.AsyncMethodCallback<voteQuestion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.questionId = questionId;
        this.vote = vote;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("voteQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        voteQuestion_args args = new voteQuestion_args();
        args.setQuestionId(questionId);
        args.setVote(vote);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnknownIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_voteQuestion();
      }
    }

    public void addQuestion(int lectureId, String question, org.apache.thrift.async.AsyncMethodCallback<addQuestion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addQuestion_call method_call = new addQuestion_call(lectureId, question, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lectureId;
      private String question;
      public addQuestion_call(int lectureId, String question, org.apache.thrift.async.AsyncMethodCallback<addQuestion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.question = question;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addQuestion_args args = new addQuestion_args();
        args.setLectureId(lectureId);
        args.setQuestion(question);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Question getResult() throws UnknownIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addQuestion();
      }
    }

    public void addAnswer(int questionId, String answer, org.apache.thrift.async.AsyncMethodCallback<addAnswer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAnswer_call method_call = new addAnswer_call(questionId, answer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAnswer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int questionId;
      private String answer;
      public addAnswer_call(int questionId, String answer, org.apache.thrift.async.AsyncMethodCallback<addAnswer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.questionId = questionId;
        this.answer = answer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAnswer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAnswer_args args = new addAnswer_args();
        args.setQuestionId(questionId);
        args.setAnswer(answer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnknownIdException, IllegalAnswerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addAnswer();
      }
    }

    public void rateLecture(int lectureId, Rating rating, org.apache.thrift.async.AsyncMethodCallback<rateLecture_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rateLecture_call method_call = new rateLecture_call(lectureId, rating, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rateLecture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lectureId;
      private Rating rating;
      public rateLecture_call(int lectureId, Rating rating, org.apache.thrift.async.AsyncMethodCallback<rateLecture_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.rating = rating;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rateLecture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rateLecture_args args = new rateLecture_args();
        args.setLectureId(lectureId);
        args.setRating(rating);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnknownIdException, IllegalRatingException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_rateLecture();
      }
    }

    public void registerCallback(String ip, int port, org.apache.thrift.async.AsyncMethodCallback<registerCallback_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerCallback_call method_call = new registerCallback_call(ip, port, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerCallback_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private int port;
      public registerCallback_call(String ip, int port, org.apache.thrift.async.AsyncMethodCallback<registerCallback_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.port = port;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerCallback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerCallback_args args = new registerCallback_args();
        args.setIp(ip);
        args.setPort(port);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerCallback();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("voteLectureSpeed", new voteLectureSpeed());
      processMap.put("voteForPause", new voteForPause());
      processMap.put("getQuestions", new getQuestions());
      processMap.put("voteQuestion", new voteQuestion());
      processMap.put("addQuestion", new addQuestion());
      processMap.put("addAnswer", new addAnswer());
      processMap.put("rateLecture", new rateLecture());
      processMap.put("registerCallback", new registerCallback());
      return processMap;
    }

    public static class voteLectureSpeed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, voteLectureSpeed_args> {
      public voteLectureSpeed() {
        super("voteLectureSpeed");
      }

      public voteLectureSpeed_args getEmptyArgsInstance() {
        return new voteLectureSpeed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public voteLectureSpeed_result getResult(I iface, voteLectureSpeed_args args) throws org.apache.thrift.TException {
        voteLectureSpeed_result result = new voteLectureSpeed_result();
        try {
          iface.voteLectureSpeed(args.lectureId, args.speedOld, args.speedNew);
        } catch (UnknownIdException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class voteForPause<I extends Iface> extends org.apache.thrift.ProcessFunction<I, voteForPause_args> {
      public voteForPause() {
        super("voteForPause");
      }

      public voteForPause_args getEmptyArgsInstance() {
        return new voteForPause_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public voteForPause_result getResult(I iface, voteForPause_args args) throws org.apache.thrift.TException {
        voteForPause_result result = new voteForPause_result();
        try {
          iface.voteForPause(args.lectureId, args.pauseOld, args.pauseNew);
        } catch (UnknownIdException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getQuestions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQuestions_args> {
      public getQuestions() {
        super("getQuestions");
      }

      public getQuestions_args getEmptyArgsInstance() {
        return new getQuestions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getQuestions_result getResult(I iface, getQuestions_args args) throws org.apache.thrift.TException {
        getQuestions_result result = new getQuestions_result();
        try {
          result.success = iface.getQuestions(args.lectureId);
        } catch (UnknownIdException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class voteQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, voteQuestion_args> {
      public voteQuestion() {
        super("voteQuestion");
      }

      public voteQuestion_args getEmptyArgsInstance() {
        return new voteQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public voteQuestion_result getResult(I iface, voteQuestion_args args) throws org.apache.thrift.TException {
        voteQuestion_result result = new voteQuestion_result();
        try {
          iface.voteQuestion(args.questionId, args.vote);
        } catch (UnknownIdException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addQuestion_args> {
      public addQuestion() {
        super("addQuestion");
      }

      public addQuestion_args getEmptyArgsInstance() {
        return new addQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addQuestion_result getResult(I iface, addQuestion_args args) throws org.apache.thrift.TException {
        addQuestion_result result = new addQuestion_result();
        try {
          result.success = iface.addQuestion(args.lectureId, args.question);
        } catch (UnknownIdException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addAnswer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAnswer_args> {
      public addAnswer() {
        super("addAnswer");
      }

      public addAnswer_args getEmptyArgsInstance() {
        return new addAnswer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAnswer_result getResult(I iface, addAnswer_args args) throws org.apache.thrift.TException {
        addAnswer_result result = new addAnswer_result();
        try {
          iface.addAnswer(args.questionId, args.answer);
        } catch (UnknownIdException ea) {
          result.ea = ea;
        } catch (IllegalAnswerException eb) {
          result.eb = eb;
        }
        return result;
      }
    }

    public static class rateLecture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rateLecture_args> {
      public rateLecture() {
        super("rateLecture");
      }

      public rateLecture_args getEmptyArgsInstance() {
        return new rateLecture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rateLecture_result getResult(I iface, rateLecture_args args) throws org.apache.thrift.TException {
        rateLecture_result result = new rateLecture_result();
        try {
          iface.rateLecture(args.lectureId, args.rating);
        } catch (UnknownIdException ea) {
          result.ea = ea;
        } catch (IllegalRatingException eb) {
          result.eb = eb;
        }
        return result;
      }
    }

    public static class registerCallback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerCallback_args> {
      public registerCallback() {
        super("registerCallback");
      }

      public registerCallback_args getEmptyArgsInstance() {
        return new registerCallback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerCallback_result getResult(I iface, registerCallback_args args) throws org.apache.thrift.TException {
        registerCallback_result result = new registerCallback_result();
        iface.registerCallback(args.ip, args.port);
        return result;
      }
    }

  }

  public static class voteLectureSpeed_args implements org.apache.thrift.TBase<voteLectureSpeed_args, voteLectureSpeed_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voteLectureSpeed_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SPEED_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("speedOld", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SPEED_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("speedNew", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new voteLectureSpeed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new voteLectureSpeed_argsTupleSchemeFactory());
    }

    public int lectureId; // required
    /**
     * 
     * @see Speed
     */
    public Speed speedOld; // required
    /**
     * 
     * @see Speed
     */
    public Speed speedNew; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      /**
       * 
       * @see Speed
       */
      SPEED_OLD((short)2, "speedOld"),
      /**
       * 
       * @see Speed
       */
      SPEED_NEW((short)3, "speedNew");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // SPEED_OLD
            return SPEED_OLD;
          case 3: // SPEED_NEW
            return SPEED_NEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LECTUREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SPEED_OLD, new org.apache.thrift.meta_data.FieldMetaData("speedOld", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Speed.class)));
      tmpMap.put(_Fields.SPEED_NEW, new org.apache.thrift.meta_data.FieldMetaData("speedNew", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Speed.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voteLectureSpeed_args.class, metaDataMap);
    }

    public voteLectureSpeed_args() {
    }

    public voteLectureSpeed_args(
      int lectureId,
      Speed speedOld,
      Speed speedNew)
    {
      this();
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      this.speedOld = speedOld;
      this.speedNew = speedNew;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public voteLectureSpeed_args(voteLectureSpeed_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lectureId = other.lectureId;
      if (other.isSetSpeedOld()) {
        this.speedOld = other.speedOld;
      }
      if (other.isSetSpeedNew()) {
        this.speedNew = other.speedNew;
      }
    }

    public voteLectureSpeed_args deepCopy() {
      return new voteLectureSpeed_args(this);
    }

    @Override
    public void clear() {
      setLectureIdIsSet(false);
      this.lectureId = 0;
      this.speedOld = null;
      this.speedNew = null;
    }

    public int getLectureId() {
      return this.lectureId;
    }

    public voteLectureSpeed_args setLectureId(int lectureId) {
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      return this;
    }

    public void unsetLectureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return EncodingUtils.testBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    public void setLectureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LECTUREID_ISSET_ID, value);
    }

    /**
     * 
     * @see Speed
     */
    public Speed getSpeedOld() {
      return this.speedOld;
    }

    /**
     * 
     * @see Speed
     */
    public voteLectureSpeed_args setSpeedOld(Speed speedOld) {
      this.speedOld = speedOld;
      return this;
    }

    public void unsetSpeedOld() {
      this.speedOld = null;
    }

    /** Returns true if field speedOld is set (has been assigned a value) and false otherwise */
    public boolean isSetSpeedOld() {
      return this.speedOld != null;
    }

    public void setSpeedOldIsSet(boolean value) {
      if (!value) {
        this.speedOld = null;
      }
    }

    /**
     * 
     * @see Speed
     */
    public Speed getSpeedNew() {
      return this.speedNew;
    }

    /**
     * 
     * @see Speed
     */
    public voteLectureSpeed_args setSpeedNew(Speed speedNew) {
      this.speedNew = speedNew;
      return this;
    }

    public void unsetSpeedNew() {
      this.speedNew = null;
    }

    /** Returns true if field speedNew is set (has been assigned a value) and false otherwise */
    public boolean isSetSpeedNew() {
      return this.speedNew != null;
    }

    public void setSpeedNewIsSet(boolean value) {
      if (!value) {
        this.speedNew = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((Integer)value);
        }
        break;

      case SPEED_OLD:
        if (value == null) {
          unsetSpeedOld();
        } else {
          setSpeedOld((Speed)value);
        }
        break;

      case SPEED_NEW:
        if (value == null) {
          unsetSpeedNew();
        } else {
          setSpeedNew((Speed)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return Integer.valueOf(getLectureId());

      case SPEED_OLD:
        return getSpeedOld();

      case SPEED_NEW:
        return getSpeedNew();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case SPEED_OLD:
        return isSetSpeedOld();
      case SPEED_NEW:
        return isSetSpeedNew();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof voteLectureSpeed_args)
        return this.equals((voteLectureSpeed_args)that);
      return false;
    }

    public boolean equals(voteLectureSpeed_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true;
      boolean that_present_lectureId = true;
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (this.lectureId != that.lectureId)
          return false;
      }

      boolean this_present_speedOld = true && this.isSetSpeedOld();
      boolean that_present_speedOld = true && that.isSetSpeedOld();
      if (this_present_speedOld || that_present_speedOld) {
        if (!(this_present_speedOld && that_present_speedOld))
          return false;
        if (!this.speedOld.equals(that.speedOld))
          return false;
      }

      boolean this_present_speedNew = true && this.isSetSpeedNew();
      boolean that_present_speedNew = true && that.isSetSpeedNew();
      if (this_present_speedNew || that_present_speedNew) {
        if (!(this_present_speedNew && that_present_speedNew))
          return false;
        if (!this.speedNew.equals(that.speedNew))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(voteLectureSpeed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      voteLectureSpeed_args typedOther = (voteLectureSpeed_args)other;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(typedOther.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, typedOther.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpeedOld()).compareTo(typedOther.isSetSpeedOld());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpeedOld()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speedOld, typedOther.speedOld);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpeedNew()).compareTo(typedOther.isSetSpeedNew());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpeedNew()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speedNew, typedOther.speedNew);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("voteLectureSpeed_args(");
      boolean first = true;

      sb.append("lectureId:");
      sb.append(this.lectureId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("speedOld:");
      if (this.speedOld == null) {
        sb.append("null");
      } else {
        sb.append(this.speedOld);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("speedNew:");
      if (this.speedNew == null) {
        sb.append("null");
      } else {
        sb.append(this.speedNew);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class voteLectureSpeed_argsStandardSchemeFactory implements SchemeFactory {
      public voteLectureSpeed_argsStandardScheme getScheme() {
        return new voteLectureSpeed_argsStandardScheme();
      }
    }

    private static class voteLectureSpeed_argsStandardScheme extends StandardScheme<voteLectureSpeed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, voteLectureSpeed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lectureId = iprot.readI32();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPEED_OLD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.speedOld = Speed.findByValue(iprot.readI32());
                struct.setSpeedOldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SPEED_NEW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.speedNew = Speed.findByValue(iprot.readI32());
                struct.setSpeedNewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, voteLectureSpeed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.lectureId);
        oprot.writeFieldEnd();
        if (struct.speedOld != null) {
          oprot.writeFieldBegin(SPEED_OLD_FIELD_DESC);
          oprot.writeI32(struct.speedOld.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.speedNew != null) {
          oprot.writeFieldBegin(SPEED_NEW_FIELD_DESC);
          oprot.writeI32(struct.speedNew.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class voteLectureSpeed_argsTupleSchemeFactory implements SchemeFactory {
      public voteLectureSpeed_argsTupleScheme getScheme() {
        return new voteLectureSpeed_argsTupleScheme();
      }
    }

    private static class voteLectureSpeed_argsTupleScheme extends TupleScheme<voteLectureSpeed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, voteLectureSpeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetSpeedOld()) {
          optionals.set(1);
        }
        if (struct.isSetSpeedNew()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLectureId()) {
          oprot.writeI32(struct.lectureId);
        }
        if (struct.isSetSpeedOld()) {
          oprot.writeI32(struct.speedOld.getValue());
        }
        if (struct.isSetSpeedNew()) {
          oprot.writeI32(struct.speedNew.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, voteLectureSpeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readI32();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.speedOld = Speed.findByValue(iprot.readI32());
          struct.setSpeedOldIsSet(true);
        }
        if (incoming.get(2)) {
          struct.speedNew = Speed.findByValue(iprot.readI32());
          struct.setSpeedNewIsSet(true);
        }
      }
    }

  }

  public static class voteLectureSpeed_result implements org.apache.thrift.TBase<voteLectureSpeed_result, voteLectureSpeed_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voteLectureSpeed_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new voteLectureSpeed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new voteLectureSpeed_resultTupleSchemeFactory());
    }

    public UnknownIdException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voteLectureSpeed_result.class, metaDataMap);
    }

    public voteLectureSpeed_result() {
    }

    public voteLectureSpeed_result(
      UnknownIdException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public voteLectureSpeed_result(voteLectureSpeed_result other) {
      if (other.isSetE()) {
        this.e = new UnknownIdException(other.e);
      }
    }

    public voteLectureSpeed_result deepCopy() {
      return new voteLectureSpeed_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public UnknownIdException getE() {
      return this.e;
    }

    public voteLectureSpeed_result setE(UnknownIdException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UnknownIdException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof voteLectureSpeed_result)
        return this.equals((voteLectureSpeed_result)that);
      return false;
    }

    public boolean equals(voteLectureSpeed_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(voteLectureSpeed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      voteLectureSpeed_result typedOther = (voteLectureSpeed_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("voteLectureSpeed_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class voteLectureSpeed_resultStandardSchemeFactory implements SchemeFactory {
      public voteLectureSpeed_resultStandardScheme getScheme() {
        return new voteLectureSpeed_resultStandardScheme();
      }
    }

    private static class voteLectureSpeed_resultStandardScheme extends StandardScheme<voteLectureSpeed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, voteLectureSpeed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UnknownIdException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, voteLectureSpeed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class voteLectureSpeed_resultTupleSchemeFactory implements SchemeFactory {
      public voteLectureSpeed_resultTupleScheme getScheme() {
        return new voteLectureSpeed_resultTupleScheme();
      }
    }

    private static class voteLectureSpeed_resultTupleScheme extends TupleScheme<voteLectureSpeed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, voteLectureSpeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, voteLectureSpeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new UnknownIdException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class voteForPause_args implements org.apache.thrift.TBase<voteForPause_args, voteForPause_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voteForPause_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAUSE_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("pauseOld", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAUSE_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("pauseNew", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new voteForPause_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new voteForPause_argsTupleSchemeFactory());
    }

    public int lectureId; // required
    /**
     * 
     * @see Pause
     */
    public Pause pauseOld; // required
    /**
     * 
     * @see Pause
     */
    public Pause pauseNew; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      /**
       * 
       * @see Pause
       */
      PAUSE_OLD((short)2, "pauseOld"),
      /**
       * 
       * @see Pause
       */
      PAUSE_NEW((short)3, "pauseNew");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // PAUSE_OLD
            return PAUSE_OLD;
          case 3: // PAUSE_NEW
            return PAUSE_NEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LECTUREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAUSE_OLD, new org.apache.thrift.meta_data.FieldMetaData("pauseOld", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Pause.class)));
      tmpMap.put(_Fields.PAUSE_NEW, new org.apache.thrift.meta_data.FieldMetaData("pauseNew", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Pause.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voteForPause_args.class, metaDataMap);
    }

    public voteForPause_args() {
    }

    public voteForPause_args(
      int lectureId,
      Pause pauseOld,
      Pause pauseNew)
    {
      this();
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      this.pauseOld = pauseOld;
      this.pauseNew = pauseNew;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public voteForPause_args(voteForPause_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lectureId = other.lectureId;
      if (other.isSetPauseOld()) {
        this.pauseOld = other.pauseOld;
      }
      if (other.isSetPauseNew()) {
        this.pauseNew = other.pauseNew;
      }
    }

    public voteForPause_args deepCopy() {
      return new voteForPause_args(this);
    }

    @Override
    public void clear() {
      setLectureIdIsSet(false);
      this.lectureId = 0;
      this.pauseOld = null;
      this.pauseNew = null;
    }

    public int getLectureId() {
      return this.lectureId;
    }

    public voteForPause_args setLectureId(int lectureId) {
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      return this;
    }

    public void unsetLectureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return EncodingUtils.testBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    public void setLectureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LECTUREID_ISSET_ID, value);
    }

    /**
     * 
     * @see Pause
     */
    public Pause getPauseOld() {
      return this.pauseOld;
    }

    /**
     * 
     * @see Pause
     */
    public voteForPause_args setPauseOld(Pause pauseOld) {
      this.pauseOld = pauseOld;
      return this;
    }

    public void unsetPauseOld() {
      this.pauseOld = null;
    }

    /** Returns true if field pauseOld is set (has been assigned a value) and false otherwise */
    public boolean isSetPauseOld() {
      return this.pauseOld != null;
    }

    public void setPauseOldIsSet(boolean value) {
      if (!value) {
        this.pauseOld = null;
      }
    }

    /**
     * 
     * @see Pause
     */
    public Pause getPauseNew() {
      return this.pauseNew;
    }

    /**
     * 
     * @see Pause
     */
    public voteForPause_args setPauseNew(Pause pauseNew) {
      this.pauseNew = pauseNew;
      return this;
    }

    public void unsetPauseNew() {
      this.pauseNew = null;
    }

    /** Returns true if field pauseNew is set (has been assigned a value) and false otherwise */
    public boolean isSetPauseNew() {
      return this.pauseNew != null;
    }

    public void setPauseNewIsSet(boolean value) {
      if (!value) {
        this.pauseNew = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((Integer)value);
        }
        break;

      case PAUSE_OLD:
        if (value == null) {
          unsetPauseOld();
        } else {
          setPauseOld((Pause)value);
        }
        break;

      case PAUSE_NEW:
        if (value == null) {
          unsetPauseNew();
        } else {
          setPauseNew((Pause)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return Integer.valueOf(getLectureId());

      case PAUSE_OLD:
        return getPauseOld();

      case PAUSE_NEW:
        return getPauseNew();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case PAUSE_OLD:
        return isSetPauseOld();
      case PAUSE_NEW:
        return isSetPauseNew();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof voteForPause_args)
        return this.equals((voteForPause_args)that);
      return false;
    }

    public boolean equals(voteForPause_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true;
      boolean that_present_lectureId = true;
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (this.lectureId != that.lectureId)
          return false;
      }

      boolean this_present_pauseOld = true && this.isSetPauseOld();
      boolean that_present_pauseOld = true && that.isSetPauseOld();
      if (this_present_pauseOld || that_present_pauseOld) {
        if (!(this_present_pauseOld && that_present_pauseOld))
          return false;
        if (!this.pauseOld.equals(that.pauseOld))
          return false;
      }

      boolean this_present_pauseNew = true && this.isSetPauseNew();
      boolean that_present_pauseNew = true && that.isSetPauseNew();
      if (this_present_pauseNew || that_present_pauseNew) {
        if (!(this_present_pauseNew && that_present_pauseNew))
          return false;
        if (!this.pauseNew.equals(that.pauseNew))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(voteForPause_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      voteForPause_args typedOther = (voteForPause_args)other;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(typedOther.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, typedOther.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPauseOld()).compareTo(typedOther.isSetPauseOld());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPauseOld()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pauseOld, typedOther.pauseOld);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPauseNew()).compareTo(typedOther.isSetPauseNew());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPauseNew()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pauseNew, typedOther.pauseNew);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("voteForPause_args(");
      boolean first = true;

      sb.append("lectureId:");
      sb.append(this.lectureId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pauseOld:");
      if (this.pauseOld == null) {
        sb.append("null");
      } else {
        sb.append(this.pauseOld);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pauseNew:");
      if (this.pauseNew == null) {
        sb.append("null");
      } else {
        sb.append(this.pauseNew);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class voteForPause_argsStandardSchemeFactory implements SchemeFactory {
      public voteForPause_argsStandardScheme getScheme() {
        return new voteForPause_argsStandardScheme();
      }
    }

    private static class voteForPause_argsStandardScheme extends StandardScheme<voteForPause_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, voteForPause_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lectureId = iprot.readI32();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAUSE_OLD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pauseOld = Pause.findByValue(iprot.readI32());
                struct.setPauseOldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAUSE_NEW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pauseNew = Pause.findByValue(iprot.readI32());
                struct.setPauseNewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, voteForPause_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.lectureId);
        oprot.writeFieldEnd();
        if (struct.pauseOld != null) {
          oprot.writeFieldBegin(PAUSE_OLD_FIELD_DESC);
          oprot.writeI32(struct.pauseOld.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.pauseNew != null) {
          oprot.writeFieldBegin(PAUSE_NEW_FIELD_DESC);
          oprot.writeI32(struct.pauseNew.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class voteForPause_argsTupleSchemeFactory implements SchemeFactory {
      public voteForPause_argsTupleScheme getScheme() {
        return new voteForPause_argsTupleScheme();
      }
    }

    private static class voteForPause_argsTupleScheme extends TupleScheme<voteForPause_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, voteForPause_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetPauseOld()) {
          optionals.set(1);
        }
        if (struct.isSetPauseNew()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLectureId()) {
          oprot.writeI32(struct.lectureId);
        }
        if (struct.isSetPauseOld()) {
          oprot.writeI32(struct.pauseOld.getValue());
        }
        if (struct.isSetPauseNew()) {
          oprot.writeI32(struct.pauseNew.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, voteForPause_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readI32();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pauseOld = Pause.findByValue(iprot.readI32());
          struct.setPauseOldIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pauseNew = Pause.findByValue(iprot.readI32());
          struct.setPauseNewIsSet(true);
        }
      }
    }

  }

  public static class voteForPause_result implements org.apache.thrift.TBase<voteForPause_result, voteForPause_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voteForPause_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new voteForPause_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new voteForPause_resultTupleSchemeFactory());
    }

    public UnknownIdException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voteForPause_result.class, metaDataMap);
    }

    public voteForPause_result() {
    }

    public voteForPause_result(
      UnknownIdException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public voteForPause_result(voteForPause_result other) {
      if (other.isSetE()) {
        this.e = new UnknownIdException(other.e);
      }
    }

    public voteForPause_result deepCopy() {
      return new voteForPause_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public UnknownIdException getE() {
      return this.e;
    }

    public voteForPause_result setE(UnknownIdException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UnknownIdException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof voteForPause_result)
        return this.equals((voteForPause_result)that);
      return false;
    }

    public boolean equals(voteForPause_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(voteForPause_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      voteForPause_result typedOther = (voteForPause_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("voteForPause_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class voteForPause_resultStandardSchemeFactory implements SchemeFactory {
      public voteForPause_resultStandardScheme getScheme() {
        return new voteForPause_resultStandardScheme();
      }
    }

    private static class voteForPause_resultStandardScheme extends StandardScheme<voteForPause_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, voteForPause_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UnknownIdException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, voteForPause_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class voteForPause_resultTupleSchemeFactory implements SchemeFactory {
      public voteForPause_resultTupleScheme getScheme() {
        return new voteForPause_resultTupleScheme();
      }
    }

    private static class voteForPause_resultTupleScheme extends TupleScheme<voteForPause_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, voteForPause_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, voteForPause_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new UnknownIdException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getQuestions_args implements org.apache.thrift.TBase<getQuestions_args, getQuestions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestions_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuestions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuestions_argsTupleSchemeFactory());
    }

    public int lectureId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LECTUREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestions_args.class, metaDataMap);
    }

    public getQuestions_args() {
    }

    public getQuestions_args(
      int lectureId)
    {
      this();
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestions_args(getQuestions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lectureId = other.lectureId;
    }

    public getQuestions_args deepCopy() {
      return new getQuestions_args(this);
    }

    @Override
    public void clear() {
      setLectureIdIsSet(false);
      this.lectureId = 0;
    }

    public int getLectureId() {
      return this.lectureId;
    }

    public getQuestions_args setLectureId(int lectureId) {
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      return this;
    }

    public void unsetLectureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return EncodingUtils.testBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    public void setLectureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LECTUREID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return Integer.valueOf(getLectureId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestions_args)
        return this.equals((getQuestions_args)that);
      return false;
    }

    public boolean equals(getQuestions_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true;
      boolean that_present_lectureId = true;
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (this.lectureId != that.lectureId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getQuestions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getQuestions_args typedOther = (getQuestions_args)other;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(typedOther.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, typedOther.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuestions_args(");
      boolean first = true;

      sb.append("lectureId:");
      sb.append(this.lectureId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestions_argsStandardSchemeFactory implements SchemeFactory {
      public getQuestions_argsStandardScheme getScheme() {
        return new getQuestions_argsStandardScheme();
      }
    }

    private static class getQuestions_argsStandardScheme extends StandardScheme<getQuestions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lectureId = iprot.readI32();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.lectureId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestions_argsTupleSchemeFactory implements SchemeFactory {
      public getQuestions_argsTupleScheme getScheme() {
        return new getQuestions_argsTupleScheme();
      }
    }

    private static class getQuestions_argsTupleScheme extends TupleScheme<getQuestions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLectureId()) {
          oprot.writeI32(struct.lectureId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readI32();
          struct.setLectureIdIsSet(true);
        }
      }
    }

  }

  public static class getQuestions_result implements org.apache.thrift.TBase<getQuestions_result, getQuestions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuestions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuestions_resultTupleSchemeFactory());
    }

    public List<Question> success; // required
    public UnknownIdException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Question.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestions_result.class, metaDataMap);
    }

    public getQuestions_result() {
    }

    public getQuestions_result(
      List<Question> success,
      UnknownIdException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestions_result(getQuestions_result other) {
      if (other.isSetSuccess()) {
        List<Question> __this__success = new ArrayList<Question>();
        for (Question other_element : other.success) {
          __this__success.add(new Question(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new UnknownIdException(other.e);
      }
    }

    public getQuestions_result deepCopy() {
      return new getQuestions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Question> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Question elem) {
      if (this.success == null) {
        this.success = new ArrayList<Question>();
      }
      this.success.add(elem);
    }

    public List<Question> getSuccess() {
      return this.success;
    }

    public getQuestions_result setSuccess(List<Question> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnknownIdException getE() {
      return this.e;
    }

    public getQuestions_result setE(UnknownIdException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Question>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UnknownIdException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestions_result)
        return this.equals((getQuestions_result)that);
      return false;
    }

    public boolean equals(getQuestions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getQuestions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getQuestions_result typedOther = (getQuestions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuestions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestions_resultStandardSchemeFactory implements SchemeFactory {
      public getQuestions_resultStandardScheme getScheme() {
        return new getQuestions_resultStandardScheme();
      }
    }

    private static class getQuestions_resultStandardScheme extends StandardScheme<getQuestions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.success = new ArrayList<Question>(_list28.size);
                  for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                  {
                    Question _elem30; // required
                    _elem30 = new Question();
                    _elem30.read(iprot);
                    struct.success.add(_elem30);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UnknownIdException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Question _iter31 : struct.success)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestions_resultTupleSchemeFactory implements SchemeFactory {
      public getQuestions_resultTupleScheme getScheme() {
        return new getQuestions_resultTupleScheme();
      }
    }

    private static class getQuestions_resultTupleScheme extends TupleScheme<getQuestions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Question _iter32 : struct.success)
            {
              _iter32.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Question>(_list33.size);
            for (int _i34 = 0; _i34 < _list33.size; ++_i34)
            {
              Question _elem35; // required
              _elem35 = new Question();
              _elem35.read(iprot);
              struct.success.add(_elem35);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new UnknownIdException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class voteQuestion_args implements org.apache.thrift.TBase<voteQuestion_args, voteQuestion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voteQuestion_args");

    private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("vote", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new voteQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new voteQuestion_argsTupleSchemeFactory());
    }

    public int questionId; // required
    public boolean vote; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUESTION_ID((short)1, "questionId"),
      VOTE((short)2, "vote");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUESTION_ID
            return QUESTION_ID;
          case 2: // VOTE
            return VOTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __QUESTIONID_ISSET_ID = 0;
    private static final int __VOTE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VOTE, new org.apache.thrift.meta_data.FieldMetaData("vote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voteQuestion_args.class, metaDataMap);
    }

    public voteQuestion_args() {
    }

    public voteQuestion_args(
      int questionId,
      boolean vote)
    {
      this();
      this.questionId = questionId;
      setQuestionIdIsSet(true);
      this.vote = vote;
      setVoteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public voteQuestion_args(voteQuestion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.questionId = other.questionId;
      this.vote = other.vote;
    }

    public voteQuestion_args deepCopy() {
      return new voteQuestion_args(this);
    }

    @Override
    public void clear() {
      setQuestionIdIsSet(false);
      this.questionId = 0;
      setVoteIsSet(false);
      this.vote = false;
    }

    public int getQuestionId() {
      return this.questionId;
    }

    public voteQuestion_args setQuestionId(int questionId) {
      this.questionId = questionId;
      setQuestionIdIsSet(true);
      return this;
    }

    public void unsetQuestionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestionId() {
      return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    public void setQuestionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
    }

    public boolean isVote() {
      return this.vote;
    }

    public voteQuestion_args setVote(boolean vote) {
      this.vote = vote;
      setVoteIsSet(true);
      return this;
    }

    public void unsetVote() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOTE_ISSET_ID);
    }

    /** Returns true if field vote is set (has been assigned a value) and false otherwise */
    public boolean isSetVote() {
      return EncodingUtils.testBit(__isset_bitfield, __VOTE_ISSET_ID);
    }

    public void setVoteIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUESTION_ID:
        if (value == null) {
          unsetQuestionId();
        } else {
          setQuestionId((Integer)value);
        }
        break;

      case VOTE:
        if (value == null) {
          unsetVote();
        } else {
          setVote((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUESTION_ID:
        return Integer.valueOf(getQuestionId());

      case VOTE:
        return Boolean.valueOf(isVote());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUESTION_ID:
        return isSetQuestionId();
      case VOTE:
        return isSetVote();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof voteQuestion_args)
        return this.equals((voteQuestion_args)that);
      return false;
    }

    public boolean equals(voteQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_questionId = true;
      boolean that_present_questionId = true;
      if (this_present_questionId || that_present_questionId) {
        if (!(this_present_questionId && that_present_questionId))
          return false;
        if (this.questionId != that.questionId)
          return false;
      }

      boolean this_present_vote = true;
      boolean that_present_vote = true;
      if (this_present_vote || that_present_vote) {
        if (!(this_present_vote && that_present_vote))
          return false;
        if (this.vote != that.vote)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(voteQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      voteQuestion_args typedOther = (voteQuestion_args)other;

      lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(typedOther.isSetQuestionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, typedOther.questionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVote()).compareTo(typedOther.isSetVote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vote, typedOther.vote);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("voteQuestion_args(");
      boolean first = true;

      sb.append("questionId:");
      sb.append(this.questionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vote:");
      sb.append(this.vote);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class voteQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public voteQuestion_argsStandardScheme getScheme() {
        return new voteQuestion_argsStandardScheme();
      }
    }

    private static class voteQuestion_argsStandardScheme extends StandardScheme<voteQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, voteQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUESTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.questionId = iprot.readI32();
                struct.setQuestionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.vote = iprot.readBool();
                struct.setVoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, voteQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
        oprot.writeI32(struct.questionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VOTE_FIELD_DESC);
        oprot.writeBool(struct.vote);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class voteQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public voteQuestion_argsTupleScheme getScheme() {
        return new voteQuestion_argsTupleScheme();
      }
    }

    private static class voteQuestion_argsTupleScheme extends TupleScheme<voteQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, voteQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuestionId()) {
          optionals.set(0);
        }
        if (struct.isSetVote()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuestionId()) {
          oprot.writeI32(struct.questionId);
        }
        if (struct.isSetVote()) {
          oprot.writeBool(struct.vote);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, voteQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.questionId = iprot.readI32();
          struct.setQuestionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vote = iprot.readBool();
          struct.setVoteIsSet(true);
        }
      }
    }

  }

  public static class voteQuestion_result implements org.apache.thrift.TBase<voteQuestion_result, voteQuestion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voteQuestion_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new voteQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new voteQuestion_resultTupleSchemeFactory());
    }

    public UnknownIdException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voteQuestion_result.class, metaDataMap);
    }

    public voteQuestion_result() {
    }

    public voteQuestion_result(
      UnknownIdException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public voteQuestion_result(voteQuestion_result other) {
      if (other.isSetE()) {
        this.e = new UnknownIdException(other.e);
      }
    }

    public voteQuestion_result deepCopy() {
      return new voteQuestion_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public UnknownIdException getE() {
      return this.e;
    }

    public voteQuestion_result setE(UnknownIdException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UnknownIdException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof voteQuestion_result)
        return this.equals((voteQuestion_result)that);
      return false;
    }

    public boolean equals(voteQuestion_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(voteQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      voteQuestion_result typedOther = (voteQuestion_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("voteQuestion_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class voteQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public voteQuestion_resultStandardScheme getScheme() {
        return new voteQuestion_resultStandardScheme();
      }
    }

    private static class voteQuestion_resultStandardScheme extends StandardScheme<voteQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, voteQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UnknownIdException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, voteQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class voteQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public voteQuestion_resultTupleScheme getScheme() {
        return new voteQuestion_resultTupleScheme();
      }
    }

    private static class voteQuestion_resultTupleScheme extends TupleScheme<voteQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, voteQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, voteQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new UnknownIdException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class addQuestion_args implements org.apache.thrift.TBase<addQuestion_args, addQuestion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQuestion_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("question", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addQuestion_argsTupleSchemeFactory());
    }

    public int lectureId; // required
    public String question; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      QUESTION((short)2, "question");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // QUESTION
            return QUESTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LECTUREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUESTION, new org.apache.thrift.meta_data.FieldMetaData("question", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQuestion_args.class, metaDataMap);
    }

    public addQuestion_args() {
    }

    public addQuestion_args(
      int lectureId,
      String question)
    {
      this();
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      this.question = question;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQuestion_args(addQuestion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lectureId = other.lectureId;
      if (other.isSetQuestion()) {
        this.question = other.question;
      }
    }

    public addQuestion_args deepCopy() {
      return new addQuestion_args(this);
    }

    @Override
    public void clear() {
      setLectureIdIsSet(false);
      this.lectureId = 0;
      this.question = null;
    }

    public int getLectureId() {
      return this.lectureId;
    }

    public addQuestion_args setLectureId(int lectureId) {
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      return this;
    }

    public void unsetLectureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return EncodingUtils.testBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    public void setLectureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LECTUREID_ISSET_ID, value);
    }

    public String getQuestion() {
      return this.question;
    }

    public addQuestion_args setQuestion(String question) {
      this.question = question;
      return this;
    }

    public void unsetQuestion() {
      this.question = null;
    }

    /** Returns true if field question is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestion() {
      return this.question != null;
    }

    public void setQuestionIsSet(boolean value) {
      if (!value) {
        this.question = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((Integer)value);
        }
        break;

      case QUESTION:
        if (value == null) {
          unsetQuestion();
        } else {
          setQuestion((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return Integer.valueOf(getLectureId());

      case QUESTION:
        return getQuestion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case QUESTION:
        return isSetQuestion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addQuestion_args)
        return this.equals((addQuestion_args)that);
      return false;
    }

    public boolean equals(addQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true;
      boolean that_present_lectureId = true;
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (this.lectureId != that.lectureId)
          return false;
      }

      boolean this_present_question = true && this.isSetQuestion();
      boolean that_present_question = true && that.isSetQuestion();
      if (this_present_question || that_present_question) {
        if (!(this_present_question && that_present_question))
          return false;
        if (!this.question.equals(that.question))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addQuestion_args typedOther = (addQuestion_args)other;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(typedOther.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, typedOther.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuestion()).compareTo(typedOther.isSetQuestion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.question, typedOther.question);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addQuestion_args(");
      boolean first = true;

      sb.append("lectureId:");
      sb.append(this.lectureId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("question:");
      if (this.question == null) {
        sb.append("null");
      } else {
        sb.append(this.question);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public addQuestion_argsStandardScheme getScheme() {
        return new addQuestion_argsStandardScheme();
      }
    }

    private static class addQuestion_argsStandardScheme extends StandardScheme<addQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lectureId = iprot.readI32();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUESTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.question = iprot.readString();
                struct.setQuestionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.lectureId);
        oprot.writeFieldEnd();
        if (struct.question != null) {
          oprot.writeFieldBegin(QUESTION_FIELD_DESC);
          oprot.writeString(struct.question);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public addQuestion_argsTupleScheme getScheme() {
        return new addQuestion_argsTupleScheme();
      }
    }

    private static class addQuestion_argsTupleScheme extends TupleScheme<addQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetQuestion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLectureId()) {
          oprot.writeI32(struct.lectureId);
        }
        if (struct.isSetQuestion()) {
          oprot.writeString(struct.question);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readI32();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.question = iprot.readString();
          struct.setQuestionIsSet(true);
        }
      }
    }

  }

  public static class addQuestion_result implements org.apache.thrift.TBase<addQuestion_result, addQuestion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addQuestion_resultTupleSchemeFactory());
    }

    public Question success; // required
    public UnknownIdException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Question.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQuestion_result.class, metaDataMap);
    }

    public addQuestion_result() {
    }

    public addQuestion_result(
      Question success,
      UnknownIdException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQuestion_result(addQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new Question(other.success);
      }
      if (other.isSetE()) {
        this.e = new UnknownIdException(other.e);
      }
    }

    public addQuestion_result deepCopy() {
      return new addQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Question getSuccess() {
      return this.success;
    }

    public addQuestion_result setSuccess(Question success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnknownIdException getE() {
      return this.e;
    }

    public addQuestion_result setE(UnknownIdException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Question)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UnknownIdException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addQuestion_result)
        return this.equals((addQuestion_result)that);
      return false;
    }

    public boolean equals(addQuestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addQuestion_result typedOther = (addQuestion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public addQuestion_resultStandardScheme getScheme() {
        return new addQuestion_resultStandardScheme();
      }
    }

    private static class addQuestion_resultStandardScheme extends StandardScheme<addQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Question();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UnknownIdException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public addQuestion_resultTupleScheme getScheme() {
        return new addQuestion_resultTupleScheme();
      }
    }

    private static class addQuestion_resultTupleScheme extends TupleScheme<addQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Question();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new UnknownIdException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class addAnswer_args implements org.apache.thrift.TBase<addAnswer_args, addAnswer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAnswer_args");

    private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("answer", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAnswer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAnswer_argsTupleSchemeFactory());
    }

    public int questionId; // required
    public String answer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUESTION_ID((short)1, "questionId"),
      ANSWER((short)2, "answer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUESTION_ID
            return QUESTION_ID;
          case 2: // ANSWER
            return ANSWER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __QUESTIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ANSWER, new org.apache.thrift.meta_data.FieldMetaData("answer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAnswer_args.class, metaDataMap);
    }

    public addAnswer_args() {
    }

    public addAnswer_args(
      int questionId,
      String answer)
    {
      this();
      this.questionId = questionId;
      setQuestionIdIsSet(true);
      this.answer = answer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAnswer_args(addAnswer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.questionId = other.questionId;
      if (other.isSetAnswer()) {
        this.answer = other.answer;
      }
    }

    public addAnswer_args deepCopy() {
      return new addAnswer_args(this);
    }

    @Override
    public void clear() {
      setQuestionIdIsSet(false);
      this.questionId = 0;
      this.answer = null;
    }

    public int getQuestionId() {
      return this.questionId;
    }

    public addAnswer_args setQuestionId(int questionId) {
      this.questionId = questionId;
      setQuestionIdIsSet(true);
      return this;
    }

    public void unsetQuestionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestionId() {
      return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    public void setQuestionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
    }

    public String getAnswer() {
      return this.answer;
    }

    public addAnswer_args setAnswer(String answer) {
      this.answer = answer;
      return this;
    }

    public void unsetAnswer() {
      this.answer = null;
    }

    /** Returns true if field answer is set (has been assigned a value) and false otherwise */
    public boolean isSetAnswer() {
      return this.answer != null;
    }

    public void setAnswerIsSet(boolean value) {
      if (!value) {
        this.answer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUESTION_ID:
        if (value == null) {
          unsetQuestionId();
        } else {
          setQuestionId((Integer)value);
        }
        break;

      case ANSWER:
        if (value == null) {
          unsetAnswer();
        } else {
          setAnswer((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUESTION_ID:
        return Integer.valueOf(getQuestionId());

      case ANSWER:
        return getAnswer();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUESTION_ID:
        return isSetQuestionId();
      case ANSWER:
        return isSetAnswer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAnswer_args)
        return this.equals((addAnswer_args)that);
      return false;
    }

    public boolean equals(addAnswer_args that) {
      if (that == null)
        return false;

      boolean this_present_questionId = true;
      boolean that_present_questionId = true;
      if (this_present_questionId || that_present_questionId) {
        if (!(this_present_questionId && that_present_questionId))
          return false;
        if (this.questionId != that.questionId)
          return false;
      }

      boolean this_present_answer = true && this.isSetAnswer();
      boolean that_present_answer = true && that.isSetAnswer();
      if (this_present_answer || that_present_answer) {
        if (!(this_present_answer && that_present_answer))
          return false;
        if (!this.answer.equals(that.answer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAnswer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAnswer_args typedOther = (addAnswer_args)other;

      lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(typedOther.isSetQuestionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, typedOther.questionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnswer()).compareTo(typedOther.isSetAnswer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnswer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer, typedOther.answer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAnswer_args(");
      boolean first = true;

      sb.append("questionId:");
      sb.append(this.questionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("answer:");
      if (this.answer == null) {
        sb.append("null");
      } else {
        sb.append(this.answer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAnswer_argsStandardSchemeFactory implements SchemeFactory {
      public addAnswer_argsStandardScheme getScheme() {
        return new addAnswer_argsStandardScheme();
      }
    }

    private static class addAnswer_argsStandardScheme extends StandardScheme<addAnswer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAnswer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUESTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.questionId = iprot.readI32();
                struct.setQuestionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ANSWER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.answer = iprot.readString();
                struct.setAnswerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAnswer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
        oprot.writeI32(struct.questionId);
        oprot.writeFieldEnd();
        if (struct.answer != null) {
          oprot.writeFieldBegin(ANSWER_FIELD_DESC);
          oprot.writeString(struct.answer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAnswer_argsTupleSchemeFactory implements SchemeFactory {
      public addAnswer_argsTupleScheme getScheme() {
        return new addAnswer_argsTupleScheme();
      }
    }

    private static class addAnswer_argsTupleScheme extends TupleScheme<addAnswer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAnswer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuestionId()) {
          optionals.set(0);
        }
        if (struct.isSetAnswer()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuestionId()) {
          oprot.writeI32(struct.questionId);
        }
        if (struct.isSetAnswer()) {
          oprot.writeString(struct.answer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAnswer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.questionId = iprot.readI32();
          struct.setQuestionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.answer = iprot.readString();
          struct.setAnswerIsSet(true);
        }
      }
    }

  }

  public static class addAnswer_result implements org.apache.thrift.TBase<addAnswer_result, addAnswer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAnswer_result");

    private static final org.apache.thrift.protocol.TField EA_FIELD_DESC = new org.apache.thrift.protocol.TField("ea", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EB_FIELD_DESC = new org.apache.thrift.protocol.TField("eb", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAnswer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAnswer_resultTupleSchemeFactory());
    }

    public UnknownIdException ea; // required
    public IllegalAnswerException eb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EA((short)1, "ea"),
      EB((short)2, "eb");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EA
            return EA;
          case 2: // EB
            return EB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EA, new org.apache.thrift.meta_data.FieldMetaData("ea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EB, new org.apache.thrift.meta_data.FieldMetaData("eb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAnswer_result.class, metaDataMap);
    }

    public addAnswer_result() {
    }

    public addAnswer_result(
      UnknownIdException ea,
      IllegalAnswerException eb)
    {
      this();
      this.ea = ea;
      this.eb = eb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAnswer_result(addAnswer_result other) {
      if (other.isSetEa()) {
        this.ea = new UnknownIdException(other.ea);
      }
      if (other.isSetEb()) {
        this.eb = new IllegalAnswerException(other.eb);
      }
    }

    public addAnswer_result deepCopy() {
      return new addAnswer_result(this);
    }

    @Override
    public void clear() {
      this.ea = null;
      this.eb = null;
    }

    public UnknownIdException getEa() {
      return this.ea;
    }

    public addAnswer_result setEa(UnknownIdException ea) {
      this.ea = ea;
      return this;
    }

    public void unsetEa() {
      this.ea = null;
    }

    /** Returns true if field ea is set (has been assigned a value) and false otherwise */
    public boolean isSetEa() {
      return this.ea != null;
    }

    public void setEaIsSet(boolean value) {
      if (!value) {
        this.ea = null;
      }
    }

    public IllegalAnswerException getEb() {
      return this.eb;
    }

    public addAnswer_result setEb(IllegalAnswerException eb) {
      this.eb = eb;
      return this;
    }

    public void unsetEb() {
      this.eb = null;
    }

    /** Returns true if field eb is set (has been assigned a value) and false otherwise */
    public boolean isSetEb() {
      return this.eb != null;
    }

    public void setEbIsSet(boolean value) {
      if (!value) {
        this.eb = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EA:
        if (value == null) {
          unsetEa();
        } else {
          setEa((UnknownIdException)value);
        }
        break;

      case EB:
        if (value == null) {
          unsetEb();
        } else {
          setEb((IllegalAnswerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EA:
        return getEa();

      case EB:
        return getEb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EA:
        return isSetEa();
      case EB:
        return isSetEb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAnswer_result)
        return this.equals((addAnswer_result)that);
      return false;
    }

    public boolean equals(addAnswer_result that) {
      if (that == null)
        return false;

      boolean this_present_ea = true && this.isSetEa();
      boolean that_present_ea = true && that.isSetEa();
      if (this_present_ea || that_present_ea) {
        if (!(this_present_ea && that_present_ea))
          return false;
        if (!this.ea.equals(that.ea))
          return false;
      }

      boolean this_present_eb = true && this.isSetEb();
      boolean that_present_eb = true && that.isSetEb();
      if (this_present_eb || that_present_eb) {
        if (!(this_present_eb && that_present_eb))
          return false;
        if (!this.eb.equals(that.eb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAnswer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAnswer_result typedOther = (addAnswer_result)other;

      lastComparison = Boolean.valueOf(isSetEa()).compareTo(typedOther.isSetEa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEa()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ea, typedOther.ea);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEb()).compareTo(typedOther.isSetEb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eb, typedOther.eb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAnswer_result(");
      boolean first = true;

      sb.append("ea:");
      if (this.ea == null) {
        sb.append("null");
      } else {
        sb.append(this.ea);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eb:");
      if (this.eb == null) {
        sb.append("null");
      } else {
        sb.append(this.eb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAnswer_resultStandardSchemeFactory implements SchemeFactory {
      public addAnswer_resultStandardScheme getScheme() {
        return new addAnswer_resultStandardScheme();
      }
    }

    private static class addAnswer_resultStandardScheme extends StandardScheme<addAnswer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAnswer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ea = new UnknownIdException();
                struct.ea.read(iprot);
                struct.setEaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eb = new IllegalAnswerException();
                struct.eb.read(iprot);
                struct.setEbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAnswer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ea != null) {
          oprot.writeFieldBegin(EA_FIELD_DESC);
          struct.ea.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eb != null) {
          oprot.writeFieldBegin(EB_FIELD_DESC);
          struct.eb.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAnswer_resultTupleSchemeFactory implements SchemeFactory {
      public addAnswer_resultTupleScheme getScheme() {
        return new addAnswer_resultTupleScheme();
      }
    }

    private static class addAnswer_resultTupleScheme extends TupleScheme<addAnswer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAnswer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEa()) {
          optionals.set(0);
        }
        if (struct.isSetEb()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEa()) {
          struct.ea.write(oprot);
        }
        if (struct.isSetEb()) {
          struct.eb.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAnswer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ea = new UnknownIdException();
          struct.ea.read(iprot);
          struct.setEaIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eb = new IllegalAnswerException();
          struct.eb.read(iprot);
          struct.setEbIsSet(true);
        }
      }
    }

  }

  public static class rateLecture_args implements org.apache.thrift.TBase<rateLecture_args, rateLecture_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rateLecture_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rating", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rateLecture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rateLecture_argsTupleSchemeFactory());
    }

    public int lectureId; // required
    /**
     * 
     * @see Rating
     */
    public Rating rating; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      /**
       * 
       * @see Rating
       */
      RATING((short)2, "rating");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // RATING
            return RATING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LECTUREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RATING, new org.apache.thrift.meta_data.FieldMetaData("rating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Rating.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rateLecture_args.class, metaDataMap);
    }

    public rateLecture_args() {
    }

    public rateLecture_args(
      int lectureId,
      Rating rating)
    {
      this();
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      this.rating = rating;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rateLecture_args(rateLecture_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lectureId = other.lectureId;
      if (other.isSetRating()) {
        this.rating = other.rating;
      }
    }

    public rateLecture_args deepCopy() {
      return new rateLecture_args(this);
    }

    @Override
    public void clear() {
      setLectureIdIsSet(false);
      this.lectureId = 0;
      this.rating = null;
    }

    public int getLectureId() {
      return this.lectureId;
    }

    public rateLecture_args setLectureId(int lectureId) {
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      return this;
    }

    public void unsetLectureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return EncodingUtils.testBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    public void setLectureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LECTUREID_ISSET_ID, value);
    }

    /**
     * 
     * @see Rating
     */
    public Rating getRating() {
      return this.rating;
    }

    /**
     * 
     * @see Rating
     */
    public rateLecture_args setRating(Rating rating) {
      this.rating = rating;
      return this;
    }

    public void unsetRating() {
      this.rating = null;
    }

    /** Returns true if field rating is set (has been assigned a value) and false otherwise */
    public boolean isSetRating() {
      return this.rating != null;
    }

    public void setRatingIsSet(boolean value) {
      if (!value) {
        this.rating = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((Integer)value);
        }
        break;

      case RATING:
        if (value == null) {
          unsetRating();
        } else {
          setRating((Rating)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return Integer.valueOf(getLectureId());

      case RATING:
        return getRating();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case RATING:
        return isSetRating();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rateLecture_args)
        return this.equals((rateLecture_args)that);
      return false;
    }

    public boolean equals(rateLecture_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true;
      boolean that_present_lectureId = true;
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (this.lectureId != that.lectureId)
          return false;
      }

      boolean this_present_rating = true && this.isSetRating();
      boolean that_present_rating = true && that.isSetRating();
      if (this_present_rating || that_present_rating) {
        if (!(this_present_rating && that_present_rating))
          return false;
        if (!this.rating.equals(that.rating))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rateLecture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rateLecture_args typedOther = (rateLecture_args)other;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(typedOther.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, typedOther.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRating()).compareTo(typedOther.isSetRating());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRating()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rating, typedOther.rating);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rateLecture_args(");
      boolean first = true;

      sb.append("lectureId:");
      sb.append(this.lectureId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rating:");
      if (this.rating == null) {
        sb.append("null");
      } else {
        sb.append(this.rating);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rateLecture_argsStandardSchemeFactory implements SchemeFactory {
      public rateLecture_argsStandardScheme getScheme() {
        return new rateLecture_argsStandardScheme();
      }
    }

    private static class rateLecture_argsStandardScheme extends StandardScheme<rateLecture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rateLecture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lectureId = iprot.readI32();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RATING
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rating = Rating.findByValue(iprot.readI32());
                struct.setRatingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rateLecture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.lectureId);
        oprot.writeFieldEnd();
        if (struct.rating != null) {
          oprot.writeFieldBegin(RATING_FIELD_DESC);
          oprot.writeI32(struct.rating.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rateLecture_argsTupleSchemeFactory implements SchemeFactory {
      public rateLecture_argsTupleScheme getScheme() {
        return new rateLecture_argsTupleScheme();
      }
    }

    private static class rateLecture_argsTupleScheme extends TupleScheme<rateLecture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rateLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetRating()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLectureId()) {
          oprot.writeI32(struct.lectureId);
        }
        if (struct.isSetRating()) {
          oprot.writeI32(struct.rating.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rateLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readI32();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rating = Rating.findByValue(iprot.readI32());
          struct.setRatingIsSet(true);
        }
      }
    }

  }

  public static class rateLecture_result implements org.apache.thrift.TBase<rateLecture_result, rateLecture_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rateLecture_result");

    private static final org.apache.thrift.protocol.TField EA_FIELD_DESC = new org.apache.thrift.protocol.TField("ea", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EB_FIELD_DESC = new org.apache.thrift.protocol.TField("eb", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rateLecture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rateLecture_resultTupleSchemeFactory());
    }

    public UnknownIdException ea; // required
    public IllegalRatingException eb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EA((short)1, "ea"),
      EB((short)2, "eb");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EA
            return EA;
          case 2: // EB
            return EB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EA, new org.apache.thrift.meta_data.FieldMetaData("ea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EB, new org.apache.thrift.meta_data.FieldMetaData("eb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rateLecture_result.class, metaDataMap);
    }

    public rateLecture_result() {
    }

    public rateLecture_result(
      UnknownIdException ea,
      IllegalRatingException eb)
    {
      this();
      this.ea = ea;
      this.eb = eb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rateLecture_result(rateLecture_result other) {
      if (other.isSetEa()) {
        this.ea = new UnknownIdException(other.ea);
      }
      if (other.isSetEb()) {
        this.eb = new IllegalRatingException(other.eb);
      }
    }

    public rateLecture_result deepCopy() {
      return new rateLecture_result(this);
    }

    @Override
    public void clear() {
      this.ea = null;
      this.eb = null;
    }

    public UnknownIdException getEa() {
      return this.ea;
    }

    public rateLecture_result setEa(UnknownIdException ea) {
      this.ea = ea;
      return this;
    }

    public void unsetEa() {
      this.ea = null;
    }

    /** Returns true if field ea is set (has been assigned a value) and false otherwise */
    public boolean isSetEa() {
      return this.ea != null;
    }

    public void setEaIsSet(boolean value) {
      if (!value) {
        this.ea = null;
      }
    }

    public IllegalRatingException getEb() {
      return this.eb;
    }

    public rateLecture_result setEb(IllegalRatingException eb) {
      this.eb = eb;
      return this;
    }

    public void unsetEb() {
      this.eb = null;
    }

    /** Returns true if field eb is set (has been assigned a value) and false otherwise */
    public boolean isSetEb() {
      return this.eb != null;
    }

    public void setEbIsSet(boolean value) {
      if (!value) {
        this.eb = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EA:
        if (value == null) {
          unsetEa();
        } else {
          setEa((UnknownIdException)value);
        }
        break;

      case EB:
        if (value == null) {
          unsetEb();
        } else {
          setEb((IllegalRatingException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EA:
        return getEa();

      case EB:
        return getEb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EA:
        return isSetEa();
      case EB:
        return isSetEb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rateLecture_result)
        return this.equals((rateLecture_result)that);
      return false;
    }

    public boolean equals(rateLecture_result that) {
      if (that == null)
        return false;

      boolean this_present_ea = true && this.isSetEa();
      boolean that_present_ea = true && that.isSetEa();
      if (this_present_ea || that_present_ea) {
        if (!(this_present_ea && that_present_ea))
          return false;
        if (!this.ea.equals(that.ea))
          return false;
      }

      boolean this_present_eb = true && this.isSetEb();
      boolean that_present_eb = true && that.isSetEb();
      if (this_present_eb || that_present_eb) {
        if (!(this_present_eb && that_present_eb))
          return false;
        if (!this.eb.equals(that.eb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rateLecture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rateLecture_result typedOther = (rateLecture_result)other;

      lastComparison = Boolean.valueOf(isSetEa()).compareTo(typedOther.isSetEa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEa()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ea, typedOther.ea);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEb()).compareTo(typedOther.isSetEb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eb, typedOther.eb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rateLecture_result(");
      boolean first = true;

      sb.append("ea:");
      if (this.ea == null) {
        sb.append("null");
      } else {
        sb.append(this.ea);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eb:");
      if (this.eb == null) {
        sb.append("null");
      } else {
        sb.append(this.eb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rateLecture_resultStandardSchemeFactory implements SchemeFactory {
      public rateLecture_resultStandardScheme getScheme() {
        return new rateLecture_resultStandardScheme();
      }
    }

    private static class rateLecture_resultStandardScheme extends StandardScheme<rateLecture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rateLecture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ea = new UnknownIdException();
                struct.ea.read(iprot);
                struct.setEaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eb = new IllegalRatingException();
                struct.eb.read(iprot);
                struct.setEbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rateLecture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ea != null) {
          oprot.writeFieldBegin(EA_FIELD_DESC);
          struct.ea.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eb != null) {
          oprot.writeFieldBegin(EB_FIELD_DESC);
          struct.eb.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rateLecture_resultTupleSchemeFactory implements SchemeFactory {
      public rateLecture_resultTupleScheme getScheme() {
        return new rateLecture_resultTupleScheme();
      }
    }

    private static class rateLecture_resultTupleScheme extends TupleScheme<rateLecture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rateLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEa()) {
          optionals.set(0);
        }
        if (struct.isSetEb()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEa()) {
          struct.ea.write(oprot);
        }
        if (struct.isSetEb()) {
          struct.eb.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rateLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ea = new UnknownIdException();
          struct.ea.read(iprot);
          struct.setEaIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eb = new IllegalRatingException();
          struct.eb.read(iprot);
          struct.setEbIsSet(true);
        }
      }
    }

  }

  public static class registerCallback_args implements org.apache.thrift.TBase<registerCallback_args, registerCallback_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerCallback_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerCallback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerCallback_argsTupleSchemeFactory());
    }

    public String ip; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      PORT((short)2, "port");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // PORT
            return PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerCallback_args.class, metaDataMap);
    }

    public registerCallback_args() {
    }

    public registerCallback_args(
      String ip,
      int port)
    {
      this();
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerCallback_args(registerCallback_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
    }

    public registerCallback_args deepCopy() {
      return new registerCallback_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
    }

    public String getIp() {
      return this.ip;
    }

    public registerCallback_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public registerCallback_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case PORT:
        return Integer.valueOf(getPort());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerCallback_args)
        return this.equals((registerCallback_args)that);
      return false;
    }

    public boolean equals(registerCallback_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerCallback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerCallback_args typedOther = (registerCallback_args)other;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerCallback_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerCallback_argsStandardSchemeFactory implements SchemeFactory {
      public registerCallback_argsStandardScheme getScheme() {
        return new registerCallback_argsStandardScheme();
      }
    }

    private static class registerCallback_argsStandardScheme extends StandardScheme<registerCallback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerCallback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerCallback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerCallback_argsTupleSchemeFactory implements SchemeFactory {
      public registerCallback_argsTupleScheme getScheme() {
        return new registerCallback_argsTupleScheme();
      }
    }

    private static class registerCallback_argsTupleScheme extends TupleScheme<registerCallback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerCallback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerCallback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
      }
    }

  }

  public static class registerCallback_result implements org.apache.thrift.TBase<registerCallback_result, registerCallback_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerCallback_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerCallback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerCallback_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerCallback_result.class, metaDataMap);
    }

    public registerCallback_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerCallback_result(registerCallback_result other) {
    }

    public registerCallback_result deepCopy() {
      return new registerCallback_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerCallback_result)
        return this.equals((registerCallback_result)that);
      return false;
    }

    public boolean equals(registerCallback_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerCallback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerCallback_result typedOther = (registerCallback_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerCallback_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerCallback_resultStandardSchemeFactory implements SchemeFactory {
      public registerCallback_resultStandardScheme getScheme() {
        return new registerCallback_resultStandardScheme();
      }
    }

    private static class registerCallback_resultStandardScheme extends StandardScheme<registerCallback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerCallback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerCallback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerCallback_resultTupleSchemeFactory implements SchemeFactory {
      public registerCallback_resultTupleScheme getScheme() {
        return new registerCallback_resultTupleScheme();
      }
    }

    private static class registerCallback_resultTupleScheme extends TupleScheme<registerCallback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerCallback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerCallback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
