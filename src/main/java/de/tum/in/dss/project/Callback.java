/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.tum.in.dss.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Callback {

  public interface Iface {

    public void notifyQuestion(Question question) throws org.apache.thrift.TException;

    public void notifySpeedVoting(int lectureId, SpeedVotingResult currentResult) throws org.apache.thrift.TException;

    public void notifyPauseVoting(int lectureId, PauseVotingResult currentResult) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void notifyQuestion(Question question, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifyQuestion_call> resultHandler) throws org.apache.thrift.TException;

    public void notifySpeedVoting(int lectureId, SpeedVotingResult currentResult, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifySpeedVoting_call> resultHandler) throws org.apache.thrift.TException;

    public void notifyPauseVoting(int lectureId, PauseVotingResult currentResult, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifyPauseVoting_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void notifyQuestion(Question question) throws org.apache.thrift.TException
    {
      send_notifyQuestion(question);
      recv_notifyQuestion();
    }

    public void send_notifyQuestion(Question question) throws org.apache.thrift.TException
    {
      notifyQuestion_args args = new notifyQuestion_args();
      args.setQuestion(question);
      sendBase("notifyQuestion", args);
    }

    public void recv_notifyQuestion() throws org.apache.thrift.TException
    {
      notifyQuestion_result result = new notifyQuestion_result();
      receiveBase(result, "notifyQuestion");
      return;
    }

    public void notifySpeedVoting(int lectureId, SpeedVotingResult currentResult) throws org.apache.thrift.TException
    {
      send_notifySpeedVoting(lectureId, currentResult);
      recv_notifySpeedVoting();
    }

    public void send_notifySpeedVoting(int lectureId, SpeedVotingResult currentResult) throws org.apache.thrift.TException
    {
      notifySpeedVoting_args args = new notifySpeedVoting_args();
      args.setLectureId(lectureId);
      args.setCurrentResult(currentResult);
      sendBase("notifySpeedVoting", args);
    }

    public void recv_notifySpeedVoting() throws org.apache.thrift.TException
    {
      notifySpeedVoting_result result = new notifySpeedVoting_result();
      receiveBase(result, "notifySpeedVoting");
      return;
    }

    public void notifyPauseVoting(int lectureId, PauseVotingResult currentResult) throws org.apache.thrift.TException
    {
      send_notifyPauseVoting(lectureId, currentResult);
      recv_notifyPauseVoting();
    }

    public void send_notifyPauseVoting(int lectureId, PauseVotingResult currentResult) throws org.apache.thrift.TException
    {
      notifyPauseVoting_args args = new notifyPauseVoting_args();
      args.setLectureId(lectureId);
      args.setCurrentResult(currentResult);
      sendBase("notifyPauseVoting", args);
    }

    public void recv_notifyPauseVoting() throws org.apache.thrift.TException
    {
      notifyPauseVoting_result result = new notifyPauseVoting_result();
      receiveBase(result, "notifyPauseVoting");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void notifyQuestion(Question question, org.apache.thrift.async.AsyncMethodCallback<notifyQuestion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyQuestion_call method_call = new notifyQuestion_call(question, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Question question;
      public notifyQuestion_call(Question question, org.apache.thrift.async.AsyncMethodCallback<notifyQuestion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.question = question;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyQuestion_args args = new notifyQuestion_args();
        args.setQuestion(question);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifyQuestion();
      }
    }

    public void notifySpeedVoting(int lectureId, SpeedVotingResult currentResult, org.apache.thrift.async.AsyncMethodCallback<notifySpeedVoting_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifySpeedVoting_call method_call = new notifySpeedVoting_call(lectureId, currentResult, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifySpeedVoting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lectureId;
      private SpeedVotingResult currentResult;
      public notifySpeedVoting_call(int lectureId, SpeedVotingResult currentResult, org.apache.thrift.async.AsyncMethodCallback<notifySpeedVoting_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.currentResult = currentResult;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifySpeedVoting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifySpeedVoting_args args = new notifySpeedVoting_args();
        args.setLectureId(lectureId);
        args.setCurrentResult(currentResult);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifySpeedVoting();
      }
    }

    public void notifyPauseVoting(int lectureId, PauseVotingResult currentResult, org.apache.thrift.async.AsyncMethodCallback<notifyPauseVoting_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyPauseVoting_call method_call = new notifyPauseVoting_call(lectureId, currentResult, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyPauseVoting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lectureId;
      private PauseVotingResult currentResult;
      public notifyPauseVoting_call(int lectureId, PauseVotingResult currentResult, org.apache.thrift.async.AsyncMethodCallback<notifyPauseVoting_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.currentResult = currentResult;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyPauseVoting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyPauseVoting_args args = new notifyPauseVoting_args();
        args.setLectureId(lectureId);
        args.setCurrentResult(currentResult);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifyPauseVoting();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("notifyQuestion", new notifyQuestion());
      processMap.put("notifySpeedVoting", new notifySpeedVoting());
      processMap.put("notifyPauseVoting", new notifyPauseVoting());
      return processMap;
    }

    public static class notifyQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyQuestion_args> {
      public notifyQuestion() {
        super("notifyQuestion");
      }

      public notifyQuestion_args getEmptyArgsInstance() {
        return new notifyQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifyQuestion_result getResult(I iface, notifyQuestion_args args) throws org.apache.thrift.TException {
        notifyQuestion_result result = new notifyQuestion_result();
        iface.notifyQuestion(args.question);
        return result;
      }
    }

    public static class notifySpeedVoting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifySpeedVoting_args> {
      public notifySpeedVoting() {
        super("notifySpeedVoting");
      }

      public notifySpeedVoting_args getEmptyArgsInstance() {
        return new notifySpeedVoting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifySpeedVoting_result getResult(I iface, notifySpeedVoting_args args) throws org.apache.thrift.TException {
        notifySpeedVoting_result result = new notifySpeedVoting_result();
        iface.notifySpeedVoting(args.lectureId, args.currentResult);
        return result;
      }
    }

    public static class notifyPauseVoting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyPauseVoting_args> {
      public notifyPauseVoting() {
        super("notifyPauseVoting");
      }

      public notifyPauseVoting_args getEmptyArgsInstance() {
        return new notifyPauseVoting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifyPauseVoting_result getResult(I iface, notifyPauseVoting_args args) throws org.apache.thrift.TException {
        notifyPauseVoting_result result = new notifyPauseVoting_result();
        iface.notifyPauseVoting(args.lectureId, args.currentResult);
        return result;
      }
    }

  }

  public static class notifyQuestion_args implements org.apache.thrift.TBase<notifyQuestion_args, notifyQuestion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyQuestion_args");

    private static final org.apache.thrift.protocol.TField QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("question", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyQuestion_argsTupleSchemeFactory());
    }

    public Question question; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUESTION((short)1, "question");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUESTION
            return QUESTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUESTION, new org.apache.thrift.meta_data.FieldMetaData("question", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Question.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyQuestion_args.class, metaDataMap);
    }

    public notifyQuestion_args() {
    }

    public notifyQuestion_args(
      Question question)
    {
      this();
      this.question = question;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyQuestion_args(notifyQuestion_args other) {
      if (other.isSetQuestion()) {
        this.question = new Question(other.question);
      }
    }

    public notifyQuestion_args deepCopy() {
      return new notifyQuestion_args(this);
    }

    @Override
    public void clear() {
      this.question = null;
    }

    public Question getQuestion() {
      return this.question;
    }

    public notifyQuestion_args setQuestion(Question question) {
      this.question = question;
      return this;
    }

    public void unsetQuestion() {
      this.question = null;
    }

    /** Returns true if field question is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestion() {
      return this.question != null;
    }

    public void setQuestionIsSet(boolean value) {
      if (!value) {
        this.question = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUESTION:
        if (value == null) {
          unsetQuestion();
        } else {
          setQuestion((Question)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUESTION:
        return getQuestion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUESTION:
        return isSetQuestion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyQuestion_args)
        return this.equals((notifyQuestion_args)that);
      return false;
    }

    public boolean equals(notifyQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_question = true && this.isSetQuestion();
      boolean that_present_question = true && that.isSetQuestion();
      if (this_present_question || that_present_question) {
        if (!(this_present_question && that_present_question))
          return false;
        if (!this.question.equals(that.question))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyQuestion_args typedOther = (notifyQuestion_args)other;

      lastComparison = Boolean.valueOf(isSetQuestion()).compareTo(typedOther.isSetQuestion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.question, typedOther.question);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyQuestion_args(");
      boolean first = true;

      sb.append("question:");
      if (this.question == null) {
        sb.append("null");
      } else {
        sb.append(this.question);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (question != null) {
        question.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public notifyQuestion_argsStandardScheme getScheme() {
        return new notifyQuestion_argsStandardScheme();
      }
    }

    private static class notifyQuestion_argsStandardScheme extends StandardScheme<notifyQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUESTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.question = new Question();
                struct.question.read(iprot);
                struct.setQuestionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.question != null) {
          oprot.writeFieldBegin(QUESTION_FIELD_DESC);
          struct.question.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public notifyQuestion_argsTupleScheme getScheme() {
        return new notifyQuestion_argsTupleScheme();
      }
    }

    private static class notifyQuestion_argsTupleScheme extends TupleScheme<notifyQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuestion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuestion()) {
          struct.question.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.question = new Question();
          struct.question.read(iprot);
          struct.setQuestionIsSet(true);
        }
      }
    }

  }

  public static class notifyQuestion_result implements org.apache.thrift.TBase<notifyQuestion_result, notifyQuestion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyQuestion_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyQuestion_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyQuestion_result.class, metaDataMap);
    }

    public notifyQuestion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyQuestion_result(notifyQuestion_result other) {
    }

    public notifyQuestion_result deepCopy() {
      return new notifyQuestion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyQuestion_result)
        return this.equals((notifyQuestion_result)that);
      return false;
    }

    public boolean equals(notifyQuestion_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyQuestion_result typedOther = (notifyQuestion_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyQuestion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public notifyQuestion_resultStandardScheme getScheme() {
        return new notifyQuestion_resultStandardScheme();
      }
    }

    private static class notifyQuestion_resultStandardScheme extends StandardScheme<notifyQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public notifyQuestion_resultTupleScheme getScheme() {
        return new notifyQuestion_resultTupleScheme();
      }
    }

    private static class notifyQuestion_resultTupleScheme extends TupleScheme<notifyQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class notifySpeedVoting_args implements org.apache.thrift.TBase<notifySpeedVoting_args, notifySpeedVoting_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifySpeedVoting_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentResult", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifySpeedVoting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifySpeedVoting_argsTupleSchemeFactory());
    }

    public int lectureId; // required
    public SpeedVotingResult currentResult; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      CURRENT_RESULT((short)2, "currentResult");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // CURRENT_RESULT
            return CURRENT_RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LECTUREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CURRENT_RESULT, new org.apache.thrift.meta_data.FieldMetaData("currentResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpeedVotingResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifySpeedVoting_args.class, metaDataMap);
    }

    public notifySpeedVoting_args() {
    }

    public notifySpeedVoting_args(
      int lectureId,
      SpeedVotingResult currentResult)
    {
      this();
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      this.currentResult = currentResult;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifySpeedVoting_args(notifySpeedVoting_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lectureId = other.lectureId;
      if (other.isSetCurrentResult()) {
        this.currentResult = new SpeedVotingResult(other.currentResult);
      }
    }

    public notifySpeedVoting_args deepCopy() {
      return new notifySpeedVoting_args(this);
    }

    @Override
    public void clear() {
      setLectureIdIsSet(false);
      this.lectureId = 0;
      this.currentResult = null;
    }

    public int getLectureId() {
      return this.lectureId;
    }

    public notifySpeedVoting_args setLectureId(int lectureId) {
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      return this;
    }

    public void unsetLectureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return EncodingUtils.testBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    public void setLectureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LECTUREID_ISSET_ID, value);
    }

    public SpeedVotingResult getCurrentResult() {
      return this.currentResult;
    }

    public notifySpeedVoting_args setCurrentResult(SpeedVotingResult currentResult) {
      this.currentResult = currentResult;
      return this;
    }

    public void unsetCurrentResult() {
      this.currentResult = null;
    }

    /** Returns true if field currentResult is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentResult() {
      return this.currentResult != null;
    }

    public void setCurrentResultIsSet(boolean value) {
      if (!value) {
        this.currentResult = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((Integer)value);
        }
        break;

      case CURRENT_RESULT:
        if (value == null) {
          unsetCurrentResult();
        } else {
          setCurrentResult((SpeedVotingResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return Integer.valueOf(getLectureId());

      case CURRENT_RESULT:
        return getCurrentResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case CURRENT_RESULT:
        return isSetCurrentResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifySpeedVoting_args)
        return this.equals((notifySpeedVoting_args)that);
      return false;
    }

    public boolean equals(notifySpeedVoting_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true;
      boolean that_present_lectureId = true;
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (this.lectureId != that.lectureId)
          return false;
      }

      boolean this_present_currentResult = true && this.isSetCurrentResult();
      boolean that_present_currentResult = true && that.isSetCurrentResult();
      if (this_present_currentResult || that_present_currentResult) {
        if (!(this_present_currentResult && that_present_currentResult))
          return false;
        if (!this.currentResult.equals(that.currentResult))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifySpeedVoting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifySpeedVoting_args typedOther = (notifySpeedVoting_args)other;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(typedOther.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, typedOther.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentResult()).compareTo(typedOther.isSetCurrentResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentResult, typedOther.currentResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifySpeedVoting_args(");
      boolean first = true;

      sb.append("lectureId:");
      sb.append(this.lectureId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentResult:");
      if (this.currentResult == null) {
        sb.append("null");
      } else {
        sb.append(this.currentResult);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (currentResult != null) {
        currentResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifySpeedVoting_argsStandardSchemeFactory implements SchemeFactory {
      public notifySpeedVoting_argsStandardScheme getScheme() {
        return new notifySpeedVoting_argsStandardScheme();
      }
    }

    private static class notifySpeedVoting_argsStandardScheme extends StandardScheme<notifySpeedVoting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifySpeedVoting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lectureId = iprot.readI32();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentResult = new SpeedVotingResult();
                struct.currentResult.read(iprot);
                struct.setCurrentResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifySpeedVoting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.lectureId);
        oprot.writeFieldEnd();
        if (struct.currentResult != null) {
          oprot.writeFieldBegin(CURRENT_RESULT_FIELD_DESC);
          struct.currentResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifySpeedVoting_argsTupleSchemeFactory implements SchemeFactory {
      public notifySpeedVoting_argsTupleScheme getScheme() {
        return new notifySpeedVoting_argsTupleScheme();
      }
    }

    private static class notifySpeedVoting_argsTupleScheme extends TupleScheme<notifySpeedVoting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifySpeedVoting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentResult()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLectureId()) {
          oprot.writeI32(struct.lectureId);
        }
        if (struct.isSetCurrentResult()) {
          struct.currentResult.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifySpeedVoting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readI32();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentResult = new SpeedVotingResult();
          struct.currentResult.read(iprot);
          struct.setCurrentResultIsSet(true);
        }
      }
    }

  }

  public static class notifySpeedVoting_result implements org.apache.thrift.TBase<notifySpeedVoting_result, notifySpeedVoting_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifySpeedVoting_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifySpeedVoting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifySpeedVoting_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifySpeedVoting_result.class, metaDataMap);
    }

    public notifySpeedVoting_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifySpeedVoting_result(notifySpeedVoting_result other) {
    }

    public notifySpeedVoting_result deepCopy() {
      return new notifySpeedVoting_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifySpeedVoting_result)
        return this.equals((notifySpeedVoting_result)that);
      return false;
    }

    public boolean equals(notifySpeedVoting_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifySpeedVoting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifySpeedVoting_result typedOther = (notifySpeedVoting_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifySpeedVoting_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifySpeedVoting_resultStandardSchemeFactory implements SchemeFactory {
      public notifySpeedVoting_resultStandardScheme getScheme() {
        return new notifySpeedVoting_resultStandardScheme();
      }
    }

    private static class notifySpeedVoting_resultStandardScheme extends StandardScheme<notifySpeedVoting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifySpeedVoting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifySpeedVoting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifySpeedVoting_resultTupleSchemeFactory implements SchemeFactory {
      public notifySpeedVoting_resultTupleScheme getScheme() {
        return new notifySpeedVoting_resultTupleScheme();
      }
    }

    private static class notifySpeedVoting_resultTupleScheme extends TupleScheme<notifySpeedVoting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifySpeedVoting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifySpeedVoting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class notifyPauseVoting_args implements org.apache.thrift.TBase<notifyPauseVoting_args, notifyPauseVoting_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyPauseVoting_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentResult", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyPauseVoting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyPauseVoting_argsTupleSchemeFactory());
    }

    public int lectureId; // required
    public PauseVotingResult currentResult; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      CURRENT_RESULT((short)2, "currentResult");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // CURRENT_RESULT
            return CURRENT_RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LECTUREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CURRENT_RESULT, new org.apache.thrift.meta_data.FieldMetaData("currentResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PauseVotingResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyPauseVoting_args.class, metaDataMap);
    }

    public notifyPauseVoting_args() {
    }

    public notifyPauseVoting_args(
      int lectureId,
      PauseVotingResult currentResult)
    {
      this();
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      this.currentResult = currentResult;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyPauseVoting_args(notifyPauseVoting_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lectureId = other.lectureId;
      if (other.isSetCurrentResult()) {
        this.currentResult = new PauseVotingResult(other.currentResult);
      }
    }

    public notifyPauseVoting_args deepCopy() {
      return new notifyPauseVoting_args(this);
    }

    @Override
    public void clear() {
      setLectureIdIsSet(false);
      this.lectureId = 0;
      this.currentResult = null;
    }

    public int getLectureId() {
      return this.lectureId;
    }

    public notifyPauseVoting_args setLectureId(int lectureId) {
      this.lectureId = lectureId;
      setLectureIdIsSet(true);
      return this;
    }

    public void unsetLectureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return EncodingUtils.testBit(__isset_bitfield, __LECTUREID_ISSET_ID);
    }

    public void setLectureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LECTUREID_ISSET_ID, value);
    }

    public PauseVotingResult getCurrentResult() {
      return this.currentResult;
    }

    public notifyPauseVoting_args setCurrentResult(PauseVotingResult currentResult) {
      this.currentResult = currentResult;
      return this;
    }

    public void unsetCurrentResult() {
      this.currentResult = null;
    }

    /** Returns true if field currentResult is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentResult() {
      return this.currentResult != null;
    }

    public void setCurrentResultIsSet(boolean value) {
      if (!value) {
        this.currentResult = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((Integer)value);
        }
        break;

      case CURRENT_RESULT:
        if (value == null) {
          unsetCurrentResult();
        } else {
          setCurrentResult((PauseVotingResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return Integer.valueOf(getLectureId());

      case CURRENT_RESULT:
        return getCurrentResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case CURRENT_RESULT:
        return isSetCurrentResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyPauseVoting_args)
        return this.equals((notifyPauseVoting_args)that);
      return false;
    }

    public boolean equals(notifyPauseVoting_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true;
      boolean that_present_lectureId = true;
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (this.lectureId != that.lectureId)
          return false;
      }

      boolean this_present_currentResult = true && this.isSetCurrentResult();
      boolean that_present_currentResult = true && that.isSetCurrentResult();
      if (this_present_currentResult || that_present_currentResult) {
        if (!(this_present_currentResult && that_present_currentResult))
          return false;
        if (!this.currentResult.equals(that.currentResult))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyPauseVoting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyPauseVoting_args typedOther = (notifyPauseVoting_args)other;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(typedOther.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, typedOther.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentResult()).compareTo(typedOther.isSetCurrentResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentResult, typedOther.currentResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyPauseVoting_args(");
      boolean first = true;

      sb.append("lectureId:");
      sb.append(this.lectureId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentResult:");
      if (this.currentResult == null) {
        sb.append("null");
      } else {
        sb.append(this.currentResult);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (currentResult != null) {
        currentResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyPauseVoting_argsStandardSchemeFactory implements SchemeFactory {
      public notifyPauseVoting_argsStandardScheme getScheme() {
        return new notifyPauseVoting_argsStandardScheme();
      }
    }

    private static class notifyPauseVoting_argsStandardScheme extends StandardScheme<notifyPauseVoting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyPauseVoting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lectureId = iprot.readI32();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentResult = new PauseVotingResult();
                struct.currentResult.read(iprot);
                struct.setCurrentResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyPauseVoting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.lectureId);
        oprot.writeFieldEnd();
        if (struct.currentResult != null) {
          oprot.writeFieldBegin(CURRENT_RESULT_FIELD_DESC);
          struct.currentResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyPauseVoting_argsTupleSchemeFactory implements SchemeFactory {
      public notifyPauseVoting_argsTupleScheme getScheme() {
        return new notifyPauseVoting_argsTupleScheme();
      }
    }

    private static class notifyPauseVoting_argsTupleScheme extends TupleScheme<notifyPauseVoting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyPauseVoting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentResult()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLectureId()) {
          oprot.writeI32(struct.lectureId);
        }
        if (struct.isSetCurrentResult()) {
          struct.currentResult.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyPauseVoting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readI32();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentResult = new PauseVotingResult();
          struct.currentResult.read(iprot);
          struct.setCurrentResultIsSet(true);
        }
      }
    }

  }

  public static class notifyPauseVoting_result implements org.apache.thrift.TBase<notifyPauseVoting_result, notifyPauseVoting_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyPauseVoting_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyPauseVoting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyPauseVoting_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyPauseVoting_result.class, metaDataMap);
    }

    public notifyPauseVoting_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyPauseVoting_result(notifyPauseVoting_result other) {
    }

    public notifyPauseVoting_result deepCopy() {
      return new notifyPauseVoting_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyPauseVoting_result)
        return this.equals((notifyPauseVoting_result)that);
      return false;
    }

    public boolean equals(notifyPauseVoting_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyPauseVoting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyPauseVoting_result typedOther = (notifyPauseVoting_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyPauseVoting_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyPauseVoting_resultStandardSchemeFactory implements SchemeFactory {
      public notifyPauseVoting_resultStandardScheme getScheme() {
        return new notifyPauseVoting_resultStandardScheme();
      }
    }

    private static class notifyPauseVoting_resultStandardScheme extends StandardScheme<notifyPauseVoting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyPauseVoting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyPauseVoting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyPauseVoting_resultTupleSchemeFactory implements SchemeFactory {
      public notifyPauseVoting_resultTupleScheme getScheme() {
        return new notifyPauseVoting_resultTupleScheme();
      }
    }

    private static class notifyPauseVoting_resultTupleScheme extends TupleScheme<notifyPauseVoting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyPauseVoting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyPauseVoting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
